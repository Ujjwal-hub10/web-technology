/*
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

*/

var media = wp.media;

// VIEW: MEDIA ITEM:

media.view.MEXPItem = wp.Backbone.View.extend({

    tagName   : 'li',
    className : 'mexp-item attachment',

    render: function() {

    	this.template = media.template( 'mexp-' + this.options.service.id + '-item-' + this.options.tab );
       	this.$el.html( this.template( this.model.toJSON() ) );

        return this;

    }

});

// VIEW - BOTTOM TOOLBAR

media.view.Toolbar.MEXP = media.view.Toolbar.extend({

	initialize: function() {

		var serviceName = this.controller.state().id.replace( /mexp-service-/g, '');

		_.defaults( this.options, {
		    event : 'inserter',
		    close : false,
			items : {
			    // See wp.media.view.Button
			    inserter     : {
			        id       : 'mexp-button',
			        style    : 'primary',
			        text     : ( 'undefined' != typeof( mexp.services[serviceName].labels.insert ) && mexp.services[serviceName].labels.insert ) ? mexp.services[serviceName].labels.insert : mexp.labels.insert,
			        priority : 80,
			        click    : function() {
						if ( this.controller.state().props && this.controller.state().props.at(0).get( 'sideload' ) )
							this.controller.state().mexpSideload();
						else
							this.controller.state().mexpInsert();
					}
			    }
			}
		});

		media.view.Toolbar.prototype.initialize.apply( this, arguments );

		this.set( 'pagination', new media.view.Button({
			tagName: 'a',
			classes: 'mexp-pagination button button-secondary',
			id: serviceName + '-loadmore',
			text: mexp.labels.loadmore,
			priority: -20
		}) );
	},

	refresh: function() {

		var selection = this.controller.state().props.get( '_all' ).get( 'selection' );

		// @TODO i think this is redundant
		this.get( 'inserter' ).model.set( 'disabled', !selection.length );

		media.view.Toolbar.prototype.refresh.apply( this, arguments );

	}

});

// VIEW - MEDIA CONTENT AREA

media.view.MEXP = media.View.extend({

	events: {
		'click .mexp-item-area'     : 'toggleSelectionHandler',
		'click .mexp-item .check'   : 'removeSelectionHandler',
		'submit .mexp-toolbar form' : 'updateInput'
	},

	initialize: function() {

		/* fired when you switch router tabs */
		
		var _this = this;

		this.collection = new Backbone.Collection();
		this.service    = this.options.service;
		this.tab        = this.options.tab;

		this.createToolbar();
		this.clearItems();

		if ( this.model.get( 'items' ) && this.model.get( 'alwaysRefresh' ) ) {
			this.model.set( 'items', [] );
			this.model.set( 'cursor', null );
			this.collection = new Backbone.Collection();
			this.collection.once( 'reset', this.render, this );
			this.collection.reset();
			this.model.set( 'fetchOnRender', false );
			this.loading();
			this.fetchItems();

			jQuery( '#' + this.service.id + '-loadmore' ).attr( 'disabled', false ).show();
		} else if ( this.model.get( 'items' ) ) {

			this.collection = new Backbone.Collection();
			this.collection.reset( this.model.get( 'items' ) );

			jQuery( '#' + this.service.id + '-loadmore' ).attr( 'disabled', false ).show();
		} else {
			jQuery( '#' + this.service.id + '-loadmore' ).hide();
		}

		// @TODO do this somewhere else:
		// @TODO this gets reverted anyway when the button model's disabled state changes. look into it.
		//jQuery( '#mexp-button' ).text( this.service.labels.insert );

		this.collection.on( 'reset', this.render, this );

		this.model.on( 'change:params', this.changedParams, this );

		this.on( 'loading',       this.loading, this );
		this.on( 'loaded',        this.loaded, this );
		this.on( 'change:params', this.changedParams, this );
		this.on( 'change:page',   this.changedPage, this );

		jQuery( '.mexp-pagination' ).click( function( event ) {
			_this.paginate( event );
		} );

		if ( _this.model.get( 'fetchOnRender' ) ) {
			_this.model.set( 'fetchOnRender', false );
			_this.loading();
			_this.fetchItems();
		}

	},

	render: function() {

		/* fired when you switch router tabs */

		var selection = this.getSelection();

		if ( this.collection && this.collection.models.length ) {

			this.clearItems();

			var container = document.createDocumentFragment();

			this.collection.each( function( model ) {
				container.appendChild( this.renderItem( model ) );
			}, this );

			this.$el.find( '.mexp-items' ).append( container );

		}

		selection.each( function( model ) {
			var id = '#mexp-item-' + this.service.id + '-' + this.tab + '-' + model.get( 'id' );
			this.$el.find( id ).closest( '.mexp-item' ).addClass( 'selected details' );
		}, this );

		jQuery( '#mexp-button' ).prop( 'disabled', !selection.length );

		return this;

	},

	renderItem : function( model ) {

		var view = new media.view.MEXPItem({
			model   : model,
			service : this.service,
			tab     : this.tab
		});

		return view.render().el;

	},

	createToolbar: function() {

		// @TODO this could be a separate view:
		html = '<div class="mexp-error attachments"></div>';
		this.$el.prepend( html );

		// @TODO this could be a separate view:
		html = '<div class="mexp-empty attachments"></div>';
		this.$el.prepend( html );

		// @TODO this could be a separate view:
		html = '<ul class="mexp-items attachments clearfix"></ul>';
		this.$el.append( html );

		// @TODO this could be a separate view:
		var toolbar_template = media.template( 'mexp-' + this.service.id + '-search-' + this.tab );
		var toolbar_html = toolbar_template( this.model.toJSON() );
		// Only append the toolbar if the toolbar has content.
		if ( toolbar_html.replace( /^\s+$/, '').length )
			this.$el.prepend( '<div class="mexp-toolbar media-toolbar clearfix">' + toolbar_html + '</div>' );

	},

	removeSelectionHandler: function( event ) {

		var target = jQuery( '#' + event.currentTarget.id );
		var id     = target.attr( 'data-id' );

		this.removeFromSelection( target, id );

		event.preventDefault();

	},

	toggleSelectionHandler: function( event ) {

		if ( event.target.href )
			return;

		var target = jQuery( '#' + event.currentTarget.id );
		var id     = target.attr( 'data-id' );

		if ( this.getSelection().get( id ) )
			this.removeFromSelection( target, id );
		else
			this.addToSelection( target, id );

	},

	addToSelection: function( target, id ) {

		target.closest( '.mexp-item' ).addClass( 'selected details' );

		this.getSelection().add( this.collection._byId[id] );

		// @TODO why isn't this triggered by the above line?
		this.controller.state().props.trigger( 'change:selection' );

	},

	removeFromSelection: function( target, id ) {

		target.closest( '.mexp-item' ).removeClass( 'selected details' );

		this.getSelection().remove( this.collection._byId[id] );

		// @TODO why isn't this triggered by the above line?
		this.controller.state().props.trigger( 'change:selection' );

	},

	clearSelection: function() {
		this.getSelection().reset();
	},

	getSelection : function() {
		return this.controller.state().props.get( '_all' ).get( 'selection' );
	},

	clearItems: function() {

		this.$el.find( '.mexp-item' ).removeClass( 'selected details' );
		this.$el.find( '.mexp-items' ).empty();
		this.$el.find( '.mexp-pagination' ).hide();

	},

	loading: function() {

		// show spinner
		this.$el.find( '.mexp-loading' ).show();

		// hide messages
		this.$el.find( '.mexp-error' ).hide().text('');
		this.$el.find( '.mexp-empty' ).hide().text('');

		// disable 'load more' button
		jQuery( '#' + this.service.id + '-loadmore' ).attr( 'disabled', true );
	},

	loaded: function( response ) {

		// hide spinner
		this.$el.find( '.mexp-loading' ).hide();

		// disable 'load more' button
		if ( this.model.get( 'max_id' ) == 0 )
			jQuery( '#' + this.service.id + '-loadmore' ).hide();
		else
			jQuery( '#' + this.service.id + '-loadmore' ).show();

	},

	fetchItems: function() {

		this.trigger( 'loading' );

		var data = {
			_nonce  : mexp._nonce,
			service : this.service.id,
			tab     : this.tab,
			params  : this.model.get( 'params' ),
			page    : this.model.get( 'page' ),
			max_id  : this.model.get( 'max_id' ),
			cursor  : this.model.get( 'cursor' )
		};

		media.ajax( 'mexp_request', {
			context : this,
			success : this.fetchedSuccess,
			error   : this.fetchedError,
			data    : data
		} );

	},

	fetchedSuccess: function( response ) {

		if ( !this.model.get( 'page' ) ) {

			if ( !response.items ) {
				this.fetchedEmpty( response );
				return;
			}

			this.model.set( 'min_id', response.meta.min_id );
			this.model.set( 'items',  response.items );

			this.collection.reset( response.items );
		} else {

			if ( !response.items ) {
				this.fetchedEmpty( response );
				return;
			}

			this.model.set( 'items', this.model.get( 'items' ).concat( response.items ) );

			var collection = new Backbone.Collection( response.items );
			var container  = document.createDocumentFragment();

			this.collection.add( collection.models );

			collection.each( function( model ) {
				container.appendChild( this.renderItem( model ) );
			}, this );

			this.$el.find( '.mexp-items' ).append( container );

		}

		jQuery( '#' + this.service.id + '-loadmore' ).attr( 'disabled', false ).show();
		this.model.set( 'max_id', response.meta.max_id );

		if ( response.meta.cursor )
			this.model.set( 'cursor', response.meta.cursor );

		this.trigger( 'loaded loaded:success', response );

	},

	fetchedEmpty: function( response ) {

		this.$el.find( '.mexp-empty' ).text( this.service.labels.noresults ).show();
		this.$el.find( '.mexp-pagination' ).hide();

		this.trigger( 'loaded loaded:noresults', response );

	},

	fetchedError: function( response ) {

		this.$el.find( '.mexp-error' ).text( response.error_message ).show();
		jQuery( '#' + this.service.id + '-loadmore' ).attr( 'disabled', false ).show();
		this.trigger( 'loaded loaded:error', response );

	},

	updateInput: function( event ) {

		// triggered when a search is submitted

		var params = this.model.get( 'params' );
		var els = this.$el.find( '.mexp-toolbar' ).find( ':input' ).each( function( k, el ) {
			var n = jQuery(this).attr('name');
			if ( n )
				params[n] = jQuery(this).val();
		} );
		
		this.clearSelection();
		jQuery( '#mexp-button' ).attr( 'disabled', 'disabled' );
		this.model.set( 'params', params );
		this.trigger( 'change:params' ); // why isn't this triggering automatically? might be because params is an object

		event.preventDefault();

	},

	paginate : function( event ) {

		if( 0 == this.collection.length )
			return;

		var page = this.model.get( 'page' ) || 1;

		this.model.set( 'page', page + 1 );
		this.trigger( 'change:page' );

		event.preventDefault();

	},

	changedPage: function() {

		// triggered when the pagination is changed

		this.fetchItems();

	},

	changedParams: function() {

		// triggered when the search parameters are changed

		this.model.set( 'page',   null );
		this.model.set( 'min_id', null );
		this.model.set( 'max_id', null );
		this.model.set( 'cursor', null );

		this.clearItems();
		this.fetchItems();

	}

});

// VIEW - MEDIA FRAME (MENU BAR)	

var post_frame = media.view.MediaFrame.Post;

media.view.MediaFrame.Post = post_frame.extend({

	initialize: function() {

		post_frame.prototype.initialize.apply( this, arguments );

		_.each( mexp.services, function( service, service_id ) {

			var id = 'mexp-service-' + service.id;
			var controller = {
				id      : id,
				router  : id + '-router',
				toolbar : id + '-toolbar',
				menu    : 'default',
				title   : service.labels.title,
				tabs    : service.tabs,
				priority: 100 // places it above Insert From URL
			};

			for ( var tab in service.tabs ) {

				// Content
				this.on( 'content:render:' + id + '-content-' + tab, _.bind( this.mexpContentRender, this, service, tab ) );

				// Set the default tab
				if ( service.tabs[tab].defaultTab )
					controller.content = id + '-content-' + tab;

			}

			this.states.add([
				new media.controller.MEXP( controller )
			]);

			// Tabs
			this.on( 'router:create:' + id + '-router', this.createRouter, this );
			this.on( 'router:render:' + id + '-router', _.bind( this.mexpRouterRender, this, service ) );

			// Toolbar
			this.on( 'toolbar:create:' + id + '-toolbar', this.mexpToolbarCreate, this );
			//this.on( 'toolbar:render:' + id + '-toolbar', _.bind( this.mexpToolbarRender, this, service ) );

		}, this );

	},

	mexpRouterRender : function( service, view ) {

		var id   = 'mexp-service-' + service.id;
		var tabs = {};

		for ( var tab in service.tabs ) {
			tab_id = id + '-content-' + tab;
			tabs[tab_id] = {
				text : service.tabs[tab].text
			};
		}

		view.set( tabs );

	},

	mexpToolbarRender : function( service, view ) {

		view.set( 'selection', new media.view.Selection.MEXP({
			service    : service,
			controller : this,
			collection : this.state().props.get('_all').get('selection'),
			priority   : -40
		}).render() );

	},

	mexpContentRender : function( service, tab ) {

		/* called when a tab becomes active */

		this.content.set( new media.view.MEXP( {
			service    : service,
			controller : this,
			model      : this.state().props.get( tab ),
			tab        : tab,
			className  : 'clearfix attachments-browser mexp-content mexp-content-' + service.id + ' mexp-content-' + service.id + '-' + tab
		} ) );

	},

	mexpToolbarCreate : function( toolbar ) {

		toolbar.view = new media.view.Toolbar.MEXP( {
			controller : this
		} );

	}

});

// CONTROLLER:

media.controller.MEXP = media.controller.State.extend({

	initialize: function( options ) {

		this.props = new Backbone.Collection();

		for ( var tab in options.tabs ) {

			this.props.add( new Backbone.Model({
				id     : tab,
				params : {},
				page   : null,
				min_id : null,
				max_id : null,
				cursor : null,
				fetchOnRender : options.tabs[ tab ].fetchOnRender,
				alwaysRefresh : options.tabs[ tab ].alwaysRefresh,
				sideload : options.tabs[ tab ].sideload
			}) );

		}

		this.props.add( new Backbone.Model({
			id        : '_all',
			selection : new Backbone.Collection()
		}) );

		this.props.on( 'change:selection', this.refresh, this );

	},

	refresh: function() {
		this.frame.toolbar.get().refresh();
	},

	mexpInsert: function() {

		var selection = this.frame.content.get().getSelection(),
		urls          = [];

		selection.each( function( model ) {
			urls.push( model.get( 'url' ) );
		}, this );

		if ( typeof(tinymce) === 'undefined' || tinymce.activeEditor === null || tinymce.activeEditor.isHidden() ) {
			media.editor.insert( _.toArray( urls ).join( "\n\n" ) );
		} else {
			media.editor.insert( "<p>" + _.toArray( urls ).join( "</p><p>" ) + "</p>" );
		}

		selection.reset();
		this.frame.close();

	},

	mexpSideload : function() {

		var selection = this.frame.content.get().getSelection(),
			serviceName = this.attributes.id.replace( /mexp-service-/g, '' ),
			nonce = jQuery( '#' + serviceName + '_verify' ).val(),
			self = this;

		this.frame.setState( 'insert' );
		selection.each( function( model ) {
			var filename = model.get( 'content' ),
				new_selection = this.frame.state().get( 'selection' ),
				file = {},
				attributes = {
					file: file,
					uploading: true,
					date: new Date(),
					filename: filename,
					menuOrder: 0,
					uploadedTo: wp.media.model.settings.post.id,
					type : 'image',
					subtype : 'jpg',
					loaded : 0,
					size : 100,
					percent : 40
				};

			file.attachment = wp.media.model.Attachment.create( attributes );
			wp.Uploader.queue.add( file.attachment );
			new_selection.add( file.attachment ? [ file.attachment ] : [] );

			jQuery.post( ajaxurl, {
				action: serviceName + '_sideload',
				nonce: nonce,
				url: filename
			} ).done( function( r ){
				self.frame.uploader.uploader.uploader.trigger( 'FileUploaded', file, {
					response : r,
					status : 200
				});
			});
		}, this );
		selection.reset();
	}

});
;
/*
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

*/

var mexp_twitter_location_js_loaded = false;
var mexp_twitter_location_map       = null;
var mexp_twitter_location_marker    = null;
var mexp_twitter_location_timeout   = null;
var pf = wp.media.view.MediaFrame.Post;

wp.media.view.MediaFrame.Post = pf.extend({

	initialize: function() {

		pf.prototype.initialize.apply( this, arguments );

		this.on( 'content:render:mexp-service-twitter-content-location', _.bind( function() {

			this.state().frame.content.get().on( 'loaded', function( response ) {

				if ( ! response || ! response.meta || ! response.meta.coords )
					return;

				var ll = new google.maps.LatLng( response.meta.coords.lat, response.meta.coords.lng );

				mexp_twitter_location_marker.setPosition( ll );
				mexp_twitter_location_map.panTo( ll );

			} );

			if ( !mexp_twitter_location_js_loaded ) {
				$('#mexp_twitter_map_canvas').css( 'background-image', 'url(' + mexp.admin_url + '/images/wpspin_light.gif)');
				if ( ! google.maps ) { // Google Maps is not loaded yet
                    var script = document.createElement("script");
                    script.type = "text/javascript";
                    script.src = mexp.services.twitter.labels.gmaps_url + '?key=' + mexp.services.twitter.labels.api_key + '&callback=mexp_twitter_location_initialize';
                    document.body.appendChild(script);
				} else {
                    mexp_twitter_location_initialize();
				}
			} else {
				mexp_twitter_location_initialize();
			}

		}, this ) );

	}

});

function mexp_twitter_location_initialize() {

	var callback = function() {
		mexp_twitter_location_fetch( mexp_twitter_location_load );
	};

	if ( navigator.geolocation ) {
		navigator.geolocation.getCurrentPosition( mexp_twitter_location_load, callback );
		mexp_twitter_location_timeout = window.setTimeout( callback, 8000 );
	} else {
		mexp_twitter_location_fetch( callback );
	}

	mexp_twitter_location_js_loaded = true;

}

function mexp_twitter_location_fetch( callback ) {

	callback( {
		coords : google.loader.ClientLocation
	} );

}

function mexp_twitter_location_load( position ) {

	var lat, lng;
	$ = jQuery;

	window.clearTimeout( mexp_twitter_location_timeout );

	// Enable the visual refresh
	google.maps.visualRefresh = true;

	var loc = $('#mexp-twitter-search-location-coords').val();

	if ( loc ) {
		ll = loc.split( ',' );
		lat = ll[0];
		lng = ll[1];
	} else if ( position.coords ) {
		lat = position.coords.latitude;
		lng = position.coords.longitude;
		$('#mexp-twitter-search-location-coords').val( lat + ',' + lng );
	}

	var radius = $('#mexp-twitter-search-location-radius').val();
	var mapOptions = {
		center            : new google.maps.LatLng( lat, lng ),
		zoom              : 10,
		mapTypeId         : google.maps.MapTypeId.ROADMAP,
		mapTypeControl    : false,
		streetViewControl : false
	};
	mexp_twitter_location_map = new google.maps.Map( document.getElementById( 'mexp_twitter_map_canvas' ), mapOptions );
	mexp_twitter_location_marker = new google.maps.Marker({
		position  : new google.maps.LatLng( lat, lng ),
		draggable : true,
		map       : mexp_twitter_location_map
	});
	var circle = new google.maps.Circle({
		map          : mexp_twitter_location_map,
		radius       : ( radius * 1000 ), // metres
		strokeWeight : 1,
		fillColor    : 'blue',
		fillOpacity  : 0.15,
		strokeColor  : '#fff'
	});
	circle.bindTo( 'center', mexp_twitter_location_marker, 'position' );

	$('#mexp-twitter-search-location-radius').on('change',function(){
		circle.setRadius( $(this).val() * 1000 );
	});
	$('#mexp-twitter-search-location-name').on('change',function(){
		$('#mexp-twitter-search-location-coords').val('');
	});

	google.maps.event.addListener(mexp_twitter_location_marker, 'dragend', function() {
		p = mexp_twitter_location_marker.getPosition();
		mexp_twitter_location_map.panTo( p );
		$('#mexp-twitter-search-location-coords').val( p.lat() + ',' + p.lng() ).closest('form').submit();
	});

}
;
/**
 * VideoPress admin media scripts
 */
(function($) {
	var VideoPressModalView = Backbone.View.extend({
		'className': 'videopress-modal-container',
		'template': wp.media.template( 'videopress-media-modal' ),

		// Render the VideoPress modal with a video object by guid.
		render: function( guid ) {
			this.delegateEvents( {
				'click .videopress-modal-close': 'closeModal',
				'click .videopress-modal-backdrop': 'closeModal'
			} );

			this.guid = guid;

			if ( ! this.$frame )
				this.$frame = $( '.media-frame-content' );

			this.$video = $( '#videopress-object-' + this.guid );
			this.$el.html( this.template( { 'video' : this.$video.html() } ) );
			this.$modal = this.$( '.videopress-modal' );
			this.$modal.hide();

			this.$frame.append( this.$el );
			this.$modal.slideDown( 'fast' );

			return this;
		},

		closeModal: function() {
			var view = this;
			var guid = this.guid;

			this.$modal.slideUp( 'fast', function() { view.remove(); } );

			$.post( ajaxurl, { action: 'videopress_get_screenshot', guid: guid }, function(r) {
				if ( 'success' == r.status && r.data.length > 0 ) {
					var $thumbnail = $( '#videopress-thumbnail-' + guid );
					var $img = $( '<img />' );

					// Avoid the jumpy effect
					$thumbnail.height( $thumbnail.find( 'img' ).height() );

					$img.attr( 'src', r.data );
					$thumbnail.html( $img );
				}
			}, 'json' );

			return this;
		}
	});

	var VideoPressModal = new VideoPressModalView();

	$( document ).on( 'click', 'a.videopress-preview', function() {
		VideoPressModal.render( $( this ).data( 'videopress-guid' ) );
	} );

	$( document ).on( 'vpRefreshThumbnail', function( e, guid ) {
		console.log( guid );
	} );
})(jQuery);;
!function(){var e,t;e=jQuery,(t=wp.media).view.Settings.Gallery=t.view.Settings.Gallery.extend({render:function(){var a=this.$el;return t.view.Settings.prototype.render.apply(this,arguments),a.append(t.template("jetpack-gallery-settings")),t.gallery.defaults.type="default",this.update.apply(this,["type"]),a.find("select[name=type]").on("change",(function(){var t=a.find("select[name=columns]").closest("label.setting");"default"===e(this).val()||"thumbnails"===e(this).val()?t.show():t.hide()})).change(),this}})}();;
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define(["react"],e):"object"==typeof exports?exports.createReactClass=e(require("react")):t.createReactClass=e(t.React)}(this,function(t){return function(t){function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var n={};return e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:o})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=2)}([function(t,e,n){"use strict";function o(t){return t}function r(t,e,n){function r(t,e){var n=N.hasOwnProperty(e)?N[e]:null;b.hasOwnProperty(e)&&s("OVERRIDE_BASE"===n,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",e),t&&s("DEFINE_MANY"===n||"DEFINE_MANY_MERGED"===n,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",e)}function u(t,n){if(n){s("function"!=typeof n,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),s(!e(n),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var o=t.prototype,i=o.__reactAutoBindPairs;n.hasOwnProperty(c)&&g.mixins(t,n.mixins);for(var a in n)if(n.hasOwnProperty(a)&&a!==c){var u=n[a],p=o.hasOwnProperty(a);if(r(p,a),g.hasOwnProperty(a))g[a](t,u);else{var l=N.hasOwnProperty(a),E="function"==typeof u,m=E&&!l&&!p&&!1!==n.autobind;if(m)i.push(a,u),o[a]=u;else if(p){var h=N[a];s(l&&("DEFINE_MANY_MERGED"===h||"DEFINE_MANY"===h),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",h,a),"DEFINE_MANY_MERGED"===h?o[a]=f(o[a],u):"DEFINE_MANY"===h&&(o[a]=d(o[a],u))}else o[a]=u}}}else;}function p(t,e){if(e)for(var n in e){var o=e[n];if(e.hasOwnProperty(n)){var r=n in g;s(!r,'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',n);var i=n in t;if(i){var a=_.hasOwnProperty(n)?_[n]:null;return s("DEFINE_MANY_MERGED"===a,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n),void(t[n]=f(t[n],o))}t[n]=o}}}function l(t,e){s(t&&e&&"object"==typeof t&&"object"==typeof e,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.");for(var n in e)e.hasOwnProperty(n)&&(s(void 0===t[n],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",n),t[n]=e[n]);return t}function f(t,e){return function(){var n=t.apply(this,arguments),o=e.apply(this,arguments);if(null==n)return o;if(null==o)return n;var r={};return l(r,n),l(r,o),r}}function d(t,e){return function(){t.apply(this,arguments),e.apply(this,arguments)}}function E(t,e){var n=e.bind(t);return n}function m(t){for(var e=t.__reactAutoBindPairs,n=0;n<e.length;n+=2){var o=e[n],r=e[n+1];t[o]=E(t,r)}}function h(t){var e=o(function(t,o,r){this.__reactAutoBindPairs.length&&m(this),this.props=t,this.context=o,this.refs=a,this.updater=r||n,this.state=null;var i=this.getInitialState?this.getInitialState():null;s("object"==typeof i&&!Array.isArray(i),"%s.getInitialState(): must return an object or null",e.displayName||"ReactCompositeComponent"),this.state=i});e.prototype=new I,e.prototype.constructor=e,e.prototype.__reactAutoBindPairs=[],y.forEach(u.bind(null,e)),u(e,v),u(e,t),u(e,D),e.getDefaultProps&&(e.defaultProps=e.getDefaultProps()),s(e.prototype.render,"createClass(...): Class specification must implement a `render` method.");for(var r in N)e.prototype[r]||(e.prototype[r]=null);return e}var y=[],N={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",UNSAFE_componentWillMount:"DEFINE_MANY",UNSAFE_componentWillReceiveProps:"DEFINE_MANY",UNSAFE_componentWillUpdate:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},_={getDerivedStateFromProps:"DEFINE_MANY_MERGED"},g={displayName:function(t,e){t.displayName=e},mixins:function(t,e){if(e)for(var n=0;n<e.length;n++)u(t,e[n])},childContextTypes:function(t,e){t.childContextTypes=i({},t.childContextTypes,e)},contextTypes:function(t,e){t.contextTypes=i({},t.contextTypes,e)},getDefaultProps:function(t,e){t.getDefaultProps?t.getDefaultProps=f(t.getDefaultProps,e):t.getDefaultProps=e},propTypes:function(t,e){t.propTypes=i({},t.propTypes,e)},statics:function(t,e){p(t,e)},autobind:function(){}},v={componentDidMount:function(){this.__isMounted=!0}},D={componentWillUnmount:function(){this.__isMounted=!1}},b={replaceState:function(t,e){this.updater.enqueueReplaceState(this,t,e)},isMounted:function(){return!!this.__isMounted}},I=function(){};return i(I.prototype,t.prototype,b),h}var i=n(5),a=n(3),s=n(4),c="mixins";t.exports=r},function(e,n){e.exports=t},function(t,e,n){"use strict";var o=n(1),r=n(0);if(void 0===o)throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");var i=(new o.Component).updater;t.exports=r(o.Component,o.isValidElement,i)},function(t,e,n){"use strict";var o={};t.exports=o},function(t,e,n){"use strict";function o(t,e,n,o,i,a,s,c){if(r(e),!t){var u;if(void 0===e)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var p=[n,o,i,a,s,c],l=0;u=new Error(e.replace(/%s/g,function(){return p[l++]})),u.name="Invariant Violation"}throw u.framesToPop=1,u}}var r=function(t){};t.exports=o},function(t,e,n){"use strict";function o(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach(function(t){o[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,s,c=o(t),u=1;u<arguments.length;u++){n=Object(arguments[u]);for(var p in n)i.call(n,p)&&(c[p]=n[p]);if(r){s=r(n);for(var l=0;l<s.length;l++)a.call(n,s[l])&&(c[s[l]]=n[s[l]])}}return c}}])});;
/* global createReactClass, Promise, wp */

function wpcomGutenbergEmbeds( settings ) {
	function withEmbedEnhancer( EmbedEdit ) {
		// HACK: createReactClass breaks the wp.element abstraction
		var enhancedEmbedEdit = createReactClass( {
			componentDidUpdate: function () {
				if ( this.props.preview && this.props.previewIsFallback ) {
					// TODO: put the caret at the end of the paragraph. There's a @wordpress/dom function for that,
					// but not sure how to hook it in. Perhaps `onSetup`?
					var para = wp.blocks.createBlock( 'core/paragraph', { content: this.props.attributes.url } );
					this.props.onReplace( para );
				}
			},

			render: function () {
				return wp.element.createElement( EmbedEdit, this.props );
			}
		} );

		return wp.data.withSelect( function ( select, ownProps ) {
			var url = ownProps.attributes.url,
				core = wp.data.select( 'core' );
			return {
				preview: url && core.getEmbedPreview( url ),
				previewIsFallback: url && core.isPreviewEmbedFallback( url ),
				fetching: url && core.isRequestingEmbedPreview( url )
			};
		} )( enhancedEmbedEdit );
	}

	if ( 'core/embed' !== settings.name ) {
		return settings;
	}

	settings.edit = withEmbedEnhancer( settings.edit );
	return settings;
}

wp.hooks.addFilter( 'blocks.registerBlockType', 'wpcomGutenbergEmbeds', wpcomGutenbergEmbeds );

/**
 * Unregister the WordPress core embed block variation.
 */
function unregisterWordPressEmbedBlockVariation( settings, name ) {
	'use strict';
	if ( name !== 'core/embed' || ! settings.variations ) {
		return settings;
	}

	settings.variations = settings.variations.filter( function( variation ) {
		return variation.name !== 'wordpress';
	} );

	return settings;
}

wp.hooks.addFilter( 'blocks.registerBlockType', 'unregisterWordPressEmbedBlockVariation', unregisterWordPressEmbedBlockVariation );

/**
 * Transform oEmbed response
 */
function transformOEmbedApiResponse( options, next ) {
	if ( options.path && options.path.indexOf( 'oembed' ) !== -1 ) {
		var url = wp.url.getQueryArg( options.path, 'url' );
		var response = next( options, next );

		/**
		 * Creates an embed response emulating core's fallback link.
		 */
		function createFallbackResponse() {
			var link = document.createElement( 'a' );
			link.href = url;
			link.innerText = url;
			return {
				html: link.outerHTML,
				type: 'rich',
				provider_name: 'Embed'
			};
		}

		return new Promise( function( resolve ) {
			response
				.then( function ( data ) {
					if ( data.html ) {
						/**
						* Removes wrappers from YouTube, Vimeo & Dailymotion block, e.g.
						* <span class="embed-youtube">, <div class="embed-vimeo"> & <div class="embed-dailymotion">
						* and return just the <iframe> child directly to allow wide & full width sizing.
						* See: https://github.com/Automattic/wp-calypso/issues/43047
						*/
						var doc = document.implementation.createHTMLDocument('');
						doc.body.innerHTML = data.html;
						var wrapper = doc.querySelector('[class="embed-youtube"],[class="embed-vimeo"],[class="embed-dailymotion"]');
						data.html = wrapper ? wrapper.innerHTML : data.html;
					}

					resolve( data );
				} )
				.catch( function () {
					resolve( createFallbackResponse() );
				} );
		} );
	} else {
		return next( options, next );
	}
}
wp.apiFetch.use( transformOEmbedApiResponse );;
/* eslint-disable no-var */
/* global jQuery, wp, calypsoifyGutenberg */

jQuery( function( $ ) {
	/**
	 * Checks self and top to determine if we are being loaded in an iframe.
	 * Can't use window.frameElement because we are being embedded from a different origin.
	 */
	function inIframe() {
		try {
			return window.self !== window.top;
		} catch ( e ) {
			return true;
		}
	}

	// Force fullscreen mode for iframed post editor.
	if (
		wp &&
		wp.data &&
		wp.data.select( 'core/edit-post' ) &&
		! wp.data.select( 'core/edit-post' ).isFeatureActive( 'fullscreenMode' )
	) {
		wp.data.dispatch( 'core/edit-post' ).toggleFeature( 'fullscreenMode' );
	}

	// Force fullscreen mode for iframed site editor.
	if (
		wp &&
		wp.data &&
		wp.data.select( 'core/edit-site' ) &&
		! wp.data.select( 'core/edit-site' ).isFeatureActive( 'fullscreenMode' )
	) {
		wp.data.dispatch( 'core/edit-site' ).toggleFeature( 'fullscreenMode' );
	}

	var editPostHeaderInception = setInterval( function() {
		var $closeButton = $( '.edit-post-fullscreen-mode-close__toolbar a' );
		if ( $closeButton.length < 1 ) {
			return;
		}
		clearInterval( editPostHeaderInception );

		if ( calypsoifyGutenberg.closeUrl ) {
			$closeButton.attr( 'href', calypsoifyGutenberg.closeUrl );
			$closeButton.attr( 'target', '_parent' );
		}
	} );

	$( 'body.revision-php a' ).each( function() {
		var href = $( this ).attr( 'href' );
		if ( !! href ) {
			$( this ).attr( 'href', href.replace( '&classic-editor', '' ) );
		}
	} );
} );
;
